@use 'sass:math';
@use 'sass:meta';
@use 'sass:list';
@use './vars';

/// Divide the given `$divident` by the given `$divisor`.
///
/// @param {Number} $divident - The divident.
/// @param {Number} $divisor - The divisor.
/// @param {Number} $precision - The precision decimals for the division.
///
/// @return {Number} The product of the division.
@function divide($dividend, $divisor, $precision: 12) {
    $sign: if(
        $dividend > 0 and $divisor > 0 or $dividend < 0 and $divisor < 0,
        1,
        -1
    );
    $dividend: math.abs($dividend);
    $divisor: math.abs($divisor);

    @if $dividend == 0 {
        @return 0;
    }

    @if $divisor == 0 {
        @error 'Cannot divide by 0';
    }

    $remainder: $dividend;
    $result: 0;
    $factor: 10;

    @while $remainder > 0 and $precision >= 0 {
        $quotient: 0;

        @while $remainder >= $divisor {
            $remainder: $remainder - $divisor;
            $quotient: $quotient + 1;
        }

        $result: $result * 10 + $quotient;
        $factor: $factor * 0.1;
        $remainder: $remainder * 10;
        $precision: $precision - 1;

        @if $precision < 0 and $remainder >= $divisor * 5 {
            $result: $result + 1;
        }
    }

    $result: $result * $factor * $sign;
    $dividend-unit: math.unit($dividend);
    $divisor-unit: math.unit($divisor);
    $unit-map: (
        'px': 1px,
        'rem': 1rem,
        'em': 1em,
        '%': 1%,
    );

    @if (
        $dividend-unit !=
            $divisor-unit and
            map-has-key($unit-map, $dividend-unit)
    ) {
        $result: $result * map-get($unit-map, $dividend-unit);
    }

    @return $result;
}

@function strip-unit($num) {
    @return divide($num, $num * 0 + 1);
}

/// Converts a pixel value to matching rem value. *Any* value passed, regardless of unit, is assumed to be a pixel value. By default, the base pixel value used to calculate the rem value is taken from the `$global-font-size` variable.
/// @access private
///
/// @param {Number} $value - Pixel value to convert.
/// @param {Number} $base [null] - Base for pixel conversion.
///
/// @returns {Number} A number in rems, calculated based on the given value and the base pixel value. rem values are passed through as is.
@function -zf-to-rem($value, $base: null) {
    // Check if the value is a number
    @if meta.type-of($value) != 'number' {
        @if $unit-warnings {
            @warn inspect($value) + ' was passed to rem-calc(), which is not a number.';
        }

        @return $value;
    }

    // Transform em into rem if someone hands over 'em's
    @if math.unit($value) == 'em' {
        $value: strip-unit($value) * 1rem;
    }

    // Calculate rem if units for $value is not rem or em
    @if math.unit($value) != 'rem' {
        $value: divide(strip-unit($value), strip-unit($base)) * 1rem;
    }

    // Turn 0rem into 0
    @if $value == 0 {
        $value: 0;
    }

    @return $value;
}

@function rem-calc($values, $base: null) {
    $rem-values: ();
    $count: list.length($values);

    // If no base is defined, defer to the global font size
    @if $base == null {
        $base: vars.$global-font-size;
    }

    // If the base font size is a %, then multiply it by 16px
    // This is because 100% font size = 16px in most all browsers
    @if math.unit($base) == '%' {
        $base: divide($base, 100%) * 16px;
    }

    // Using rem as base allows correct scaling
    @if math.unit($base) == 'rem' {
        $base: strip-unit($base) * 16px;
    }

    @if $count == 1 {
        @return -zf-to-rem($values, $base);
    }

    @for $i from 1 through $count {
        $rem-values: list.append(
            $rem-values,
            -zf-to-rem(list.nth($values, $i), $base)
        );
    }

    @return $rem-values;
}
